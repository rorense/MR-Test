import { createSlice } from "@reduxjs/toolkit";

// This JavaScript file is part of a Redux setup in a React project. Redux is a state management library often used in React applications to manage global state. The Redux Toolkit library is being used here, which provides a set of tools to simplify common Redux use cases.

// The file begins by importing the createSlice function from Redux Toolkit. This function is used to generate Redux action creators and reducers with less boilerplate code.

// Next, an initialState object is defined with a single property, products, which is an empty array. This represents the initial state of the cart in the application.

// The createSlice function is then called to create a slice of the Redux store. A slice represents a portion of the Redux store and has a name, initial state, and a set of reducers. In this case, the slice is named "cart", its initial state is the initialState object, and it has two reducers: addToCart and resetCart.

// The addToCart reducer is a function that takes the current state and an action, and modifies the state based on the action. It first tries to find an item in the products array with the same id and size as the payload of the action. If such an item is found, its quantity is increased by the quantity in the action payload. If no such item is found, the action payload is added to the products array.

// The resetCart reducer is a simpler function that resets the products array to an empty array, effectively emptying the cart.

// Finally, the actions created by createSlice are exported for use elsewhere in the application, and the reducer function generated by createSlice is exported as the default export of the module. This reducer function will be used to handle actions related to this slice of the Redux store.

const initialState = {
  products: [],
};

export const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    addToCart: (state, action) => {
      const item = state.products.find((item) => item.id === action.payload.id);
      const size = state.products.find(
        (item) => item.size === action.payload.size
      );

      if (item && size) {
        item.quantity += action.payload.quantity;
      } else {
        state.products.push(action.payload);
      }
    },
    resetCart: (state) => {
      state.products = [];
    },
  },
});

export const { addToCart, resetCart } = cartSlice.actions;

export default cartSlice.reducer;
